/* eslint-disable @typescript-eslint/no-unused-vars */
'use client';

import React, { useState, useEffect } from 'react';
import { Workflow, AlertCircle, ArrowRight, GitBranch, GitMerge, GitPullRequest, LogIn, User, Home, Settings, Search, Database, Server } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

interface RepositoryFlowAnalysisProps {
  repoFullName: string;
}

interface FlowNode {
  id: string;
  type: 'page' | 'component' | 'api' | 'auth' | 'data';
  name: string;
  description: string;
  files?: string[];
}

interface FlowConnection {
  source: string;
  target: string;
  label?: string;
}

interface ApplicationFlow {
  nodes: FlowNode[];
  connections: FlowConnection[];
}

// This is a simplified flow analysis based on common patterns in repositories
// In a real implementation, this would be generated by analyzing the actual code
function generateApplicationFlow(repoFullName: string): ApplicationFlow {
  // Default flow for most web applications
  const defaultFlow: ApplicationFlow = {
    nodes: [
      {
        id: 'auth',
        type: 'auth',
        name: 'Authentication',
        description: 'User login, registration, and authentication processes',
        files: ['/auth', '/login', '/register', '/api/auth']
      },
      {
        id: 'home',
        type: 'page',
        name: 'Home Page',
        description: 'Main landing page and dashboard',
        files: ['/home', '/dashboard', '/index', '/']
      },
      {
        id: 'user',
        type: 'page',
        name: 'User Profile',
        description: 'User profile management and settings',
        files: ['/profile', '/user', '/account', '/settings']
      },
      {
        id: 'data',
        type: 'data',
        name: 'Data Models',
        description: 'Core data structures and state management',
        files: ['/models', '/store', '/context', '/hooks']
      },
      {
        id: 'api',
        type: 'api',
        name: 'API Services',
        description: 'Backend API endpoints and services',
        files: ['/api', '/services', '/controllers']
      },
      {
        id: 'ui',
        type: 'component',
        name: 'UI Components',
        description: 'Reusable interface components',
        files: ['/components', '/ui', '/elements']
      }
    ],
    connections: [
      { source: 'auth', target: 'home', label: 'After login' },
      { source: 'home', target: 'user', label: 'Profile access' },
      { source: 'home', target: 'api', label: 'Data requests' },
      { source: 'api', target: 'data', label: 'Data processing' },
      { source: 'user', target: 'api', label: 'Profile updates' },
      { source: 'ui', target: 'home', label: 'UI rendering' },
      { source: 'ui', target: 'user', label: 'UI rendering' }
    ]
  };

  // Customize based on repository name
  if (repoFullName.includes('e-commerce') || repoFullName.includes('shop') || repoFullName.includes('store')) {
    defaultFlow.nodes.push(
      {
        id: 'products',
        type: 'page',
        name: 'Product Catalog',
        description: 'Product listings and details',
        files: ['/products', '/catalog', '/items']
      },
      {
        id: 'cart',
        type: 'page',
        name: 'Shopping Cart',
        description: 'Cart management and checkout process',
        files: ['/cart', '/checkout', '/basket']
      },
      {
        id: 'orders',
        type: 'page',
        name: 'Orders',
        description: 'Order history and tracking',
        files: ['/orders', '/history', '/purchases']
      }
    );
    defaultFlow.connections.push(
      { source: 'home', target: 'products', label: 'Browse products' },
      { source: 'products', target: 'cart', label: 'Add to cart' },
      { source: 'cart', target: 'orders', label: 'Place order' },
      { source: 'api', target: 'products', label: 'Product data' },
      { source: 'api', target: 'cart', label: 'Cart operations' },
      { source: 'api', target: 'orders', label: 'Order processing' }
    );
  } else if (repoFullName.includes('blog') || repoFullName.includes('cms')) {
    defaultFlow.nodes.push(
      {
        id: 'posts',
        type: 'page',
        name: 'Blog Posts',
        description: 'Article listings and content',
        files: ['/posts', '/articles', '/blog']
      },
      {
        id: 'editor',
        type: 'page',
        name: 'Content Editor',
        description: 'Content creation and editing interface',
        files: ['/editor', '/create', '/compose']
      },
      {
        id: 'comments',
        type: 'component',
        name: 'Comments',
        description: 'User discussion and feedback',
        files: ['/comments', '/discussions', '/feedback']
      }
    );
    defaultFlow.connections.push(
      { source: 'home', target: 'posts', label: 'View articles' },
      { source: 'user', target: 'editor', label: 'Create content' },
      { source: 'posts', target: 'comments', label: 'Discuss content' },
      { source: 'api', target: 'posts', label: 'Content data' },
      { source: 'editor', target: 'api', label: 'Save content' },
      { source: 'comments', target: 'api', label: 'Store comments' }
    );
  } else if (repoFullName.includes('calendar') || repoFullName.includes('schedule') || repoFullName.includes('cal.com')) {
    defaultFlow.nodes.push(
      {
        id: 'calendar',
        type: 'page',
        name: 'Calendar View',
        description: 'Calendar interface and event display',
        files: ['/calendar', '/schedule', '/events']
      },
      {
        id: 'booking',
        type: 'page',
        name: 'Booking System',
        description: 'Appointment scheduling and management',
        files: ['/booking', '/appointments', '/schedule']
      },
      {
        id: 'availability',
        type: 'component',
        name: 'Availability',
        description: 'User availability settings and preferences',
        files: ['/availability', '/preferences', '/settings']
      },
      {
        id: 'notifications',
        type: 'api',
        name: 'Notifications',
        description: 'Event reminders and alerts',
        files: ['/notifications', '/reminders', '/alerts']
      }
    );
    defaultFlow.connections.push(
      { source: 'home', target: 'calendar', label: 'View schedule' },
      { source: 'calendar', target: 'booking', label: 'Create appointment' },
      { source: 'user', target: 'availability', label: 'Set preferences' },
      { source: 'booking', target: 'notifications', label: 'Send reminders' },
      { source: 'api', target: 'calendar', label: 'Event data' },
      { source: 'api', target: 'booking', label: 'Booking operations' },
      { source: 'availability', target: 'api', label: 'Store preferences' }
    );
  }

  return defaultFlow;
}

function getNodeIcon(type: string) {
  switch(type) {
    case 'page':
      return <Home className="w-5 h-5 text-blue-400" />;
    case 'component':
      return <Settings className="w-5 h-5 text-purple-400" />;
    case 'api':
      return <Server className="w-5 h-5 text-green-400" />;
    case 'auth':
      return <LogIn className="w-5 h-5 text-red-400" />;
    case 'data':
      return <Database className="w-5 h-5 text-yellow-400" />;
    default:
      return <GitBranch className="w-5 h-5 text-gray-400" />;
  }
}

export function RepositoryFlowAnalysis({ repoFullName }: RepositoryFlowAnalysisProps) {
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [flow, setFlow] = useState<ApplicationFlow | null>(null);
  
  useEffect(() => {
    // In a real implementation, this would fetch from an API
    // For now, we'll generate a flow based on the repository name
    try {
      const generatedFlow = generateApplicationFlow(repoFullName);
      setFlow(generatedFlow);
      setIsLoading(false);
    } catch (err) {
      console.error('Error generating flow:', err);
      setError('Failed to generate application flow');
      setIsLoading(false);
    }
  }, [repoFullName]);
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8 min-h-[300px]">
        <div className="text-center">
          <Workflow className="w-8 h-8 text-indigo-400 animate-spin mx-auto mb-4" />
          <p className="text-white/70">Analyzing application flow...</p>
        </div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="p-6 bg-red-500/10 border border-red-500/30 rounded-lg">
        <div className="flex items-start gap-3">
          <AlertCircle className="w-5 h-5 text-red-500 mt-0.5" />
          <div>
            <h3 className="text-red-500 font-medium">Error Analyzing Flow</h3>
            <p className="text-white/70 mt-1">{error}</p>
          </div>
        </div>
      </div>
    );
  }
  
  if (!flow) return null;
  
  return (
    <div className="space-y-6">
      <div className="bg-white/5 backdrop-blur-lg border border-white/10 rounded-lg p-4">
        <h3 className="text-white font-medium mb-4">Application Flow</h3>
        <p className="text-white/70 mb-6 text-sm">
          This diagram shows the main user flows and interactions between different parts of the application.
        </p>
        
        <div className="relative overflow-x-auto pb-6">
          <div className="min-w-[700px] flex flex-col gap-8">
            {/* Flow diagram */}
            <div className="grid grid-cols-3 gap-4">
              {flow.nodes.filter(node => node.type === 'auth').map(node => (
                <div key={node.id} className="col-span-3">
                  <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-3 max-w-md mx-auto">
                    <div className="flex items-center gap-2 mb-2">
                      {getNodeIcon(node.type)}
                      <h4 className="text-white font-medium">{node.name}</h4>
                      <Badge className="ml-auto bg-red-500/20 text-red-300">{node.type}</Badge>
                    </div>
                    <p className="text-white/70 text-sm">{node.description}</p>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="flex justify-center">
              <div className="h-8 w-px bg-white/20 relative">
                <ArrowRight className="w-4 h-4 text-white/60 absolute -bottom-2 -right-2 rotate-90" />
              </div>
            </div>
            
            <div className="grid grid-cols-3 gap-4">
              {flow.nodes.filter(node => node.type === 'page' && node.id !== 'user').map(node => (
                <div key={node.id} className="col-span-1">
                  <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-3 h-full">
                    <div className="flex items-center gap-2 mb-2">
                      {getNodeIcon(node.type)}
                      <h4 className="text-white font-medium">{node.name}</h4>
                      <Badge className="ml-auto bg-blue-500/20 text-blue-300">{node.type}</Badge>
                    </div>
                    <p className="text-white/70 text-sm">{node.description}</p>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="flex justify-center">
              <div className="h-8 w-px bg-white/20 relative">
                <ArrowRight className="w-4 h-4 text-white/60 absolute -bottom-2 -right-2 rotate-90" />
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="col-span-1">
                <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3 h-full">
                  <div className="flex items-center gap-2 mb-2">
                    {getNodeIcon('data')}
                    <h4 className="text-white font-medium">Data Layer</h4>
                    <Badge className="ml-auto bg-yellow-500/20 text-yellow-300">data</Badge>
                  </div>
                  <p className="text-white/70 text-sm mb-3">Core data structures and state management</p>
                  
                  <div className="grid grid-cols-2 gap-2">
                    {flow.nodes.filter(node => node.type === 'data').map(node => (
                      <div key={node.id} className="col-span-2 bg-black/20 rounded p-2">
                        <h5 className="text-white/90 text-sm font-medium">{node.name}</h5>
                        <p className="text-white/60 text-xs">{node.description}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              <div className="col-span-1">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-3 h-full">
                  <div className="flex items-center gap-2 mb-2">
                    {getNodeIcon('api')}
                    <h4 className="text-white font-medium">API Layer</h4>
                    <Badge className="ml-auto bg-green-500/20 text-green-300">api</Badge>
                  </div>
                  <p className="text-white/70 text-sm mb-3">Backend services and endpoints</p>
                  
                  <div className="grid grid-cols-2 gap-2">
                    {flow.nodes.filter(node => node.type === 'api').map(node => (
                      <div key={node.id} className="col-span-1 bg-black/20 rounded p-2">
                        <h5 className="text-white/90 text-sm font-medium">{node.name}</h5>
                        <p className="text-white/60 text-xs">{node.description}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex justify-center">
              <div className="h-8 w-px bg-white/20 relative">
                <ArrowRight className="w-4 h-4 text-white/60 absolute -bottom-2 -right-2 rotate-90" />
              </div>
            </div>
            
            <div className="grid grid-cols-1 gap-4">
              <div className="col-span-1">
                <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-3 max-w-md mx-auto">
                  <div className="flex items-center gap-2 mb-2">
                    {getNodeIcon('component')}
                    <h4 className="text-white font-medium">UI Components</h4>
                    <Badge className="ml-auto bg-purple-500/20 text-purple-300">component</Badge>
                  </div>
                  <p className="text-white/70 text-sm">Reusable interface elements used throughout the application</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="bg-white/5 backdrop-blur-lg border border-white/10 rounded-lg p-4">
        <h3 className="text-white font-medium mb-3">Key User Flows</h3>
        
        <div className="space-y-3">
          {flow.connections.map((connection, index) => {
            const sourceNode = flow.nodes.find(n => n.id === connection.source);
            const targetNode = flow.nodes.find(n => n.id === connection.target);
            
            if (!sourceNode || !targetNode) return null;
            
            return (
              <div key={index} className="flex items-center gap-2 py-2 border-b border-white/10 last:border-0">
                <Badge 
                  className={`
                    ${sourceNode.type === 'auth' ? 'bg-red-500/20 text-red-300' : ''}
                    ${sourceNode.type === 'page' ? 'bg-blue-500/20 text-blue-300' : ''}
                    ${sourceNode.type === 'component' ? 'bg-purple-500/20 text-purple-300' : ''}
                    ${sourceNode.type === 'api' ? 'bg-green-500/20 text-green-300' : ''}
                    ${sourceNode.type === 'data' ? 'bg-yellow-500/20 text-yellow-300' : ''}
                  `}
                >
                  {sourceNode.name}
                </Badge>
                
                <div className="flex items-center gap-1">
                  <ArrowRight className="w-4 h-4 text-white/40" />
                  <span className="text-white/60 text-xs">{connection.label}</span>
                  <ArrowRight className="w-4 h-4 text-white/40" />
                </div>
                
                <Badge 
                  className={`
                    ${targetNode.type === 'auth' ? 'bg-red-500/20 text-red-300' : ''}
                    ${targetNode.type === 'page' ? 'bg-blue-500/20 text-blue-300' : ''}
                    ${targetNode.type === 'component' ? 'bg-purple-500/20 text-purple-300' : ''}
                    ${targetNode.type === 'api' ? 'bg-green-500/20 text-green-300' : ''}
                    ${targetNode.type === 'data' ? 'bg-yellow-500/20 text-yellow-300' : ''}
                  `}
                >
                  {targetNode.name}
                </Badge>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}