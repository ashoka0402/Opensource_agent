'use client';

import React, { Suspense, useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import axios from 'axios';
import dynamic from 'next/dynamic';

const FlowDiagram = dynamic(() => import('@/components/FlowDiagram'), {
  ssr: false,
  loading: () => (
    <div className="border-2 border-dashed border-gray-700 bg-gray-900/20 rounded-lg min-h-[500px] flex items-center justify-center p-8">
      <p className="text-gray-400 text-xl">Loading Diagram...</p>
    </div>
  ),
});

function VisualizePageContent() {
  const searchParams = useSearchParams();
  const repoFullName = searchParams.get('repo');

  const [diagram, setDiagram] = useState<string | null>(null);
  const [prompt, setPrompt] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const handleDiagramUpdate = (newDiagram: string) => {
    setDiagram(newDiagram);
  };

  useEffect(() => {
    if (repoFullName) {
      const fetchDiagram = async () => {
        setIsLoading(true);
        setError(null);
        try {
          const response = await axios.get(`/api/visualize-repo?repo=${repoFullName}`);
          const diag = response?.data?.diagram;
          const prmpt = response?.data?.prompt ?? null;

          // Validate diagram
          if (typeof diag !== 'string' || !diag.trim()) {
            throw new Error('Invalid diagram payload received from server.');
          }
          const trimmed = diag.trim();
          const looksMermaid = trimmed.startsWith('graph') || trimmed.startsWith('flowchart') || trimmed.startsWith('%%{init:');
          if (!looksMermaid) {
            throw new Error('Server returned a non-Mermaid diagram.');
          }

          setDiagram(trimmed);
          setPrompt(prmpt);
        } catch (err) {
          console.error('Failed to fetch diagram:', err);
          const msg = err && typeof err === 'object' && 'message' in err ? String((err as Error).message) : '';
          if (msg === 'Invalid diagram payload received from server.' || msg === 'Server returned a non-Mermaid diagram.') {
            setError(msg);
          } else {
            setError('Could not generate the architecture diagram. The repository might be private, not contain a README, or the README may be too complex to analyze.');
          }
        }
        setIsLoading(false);
      };

      fetchDiagram();
    }
  }, [repoFullName]);

  if (!repoFullName) {
    return (
      <main className="container mx-auto px-4 py-8 pt-24 md:pt-32">
        <h1 className="text-2xl font-bold text-red-500">Error: Repository not specified.</h1>
        <p>Please go back and select a repository to visualize.</p>
      </main>
    );
  }

  return (
    <main className="container mx-auto px-4 py-8 pt-24 md:pt-32">
      <h1 className="text-4xl font-rye mb-2 text-white">Architecture Diagram: <span className="text-purple-400">{repoFullName}</span></h1>
      <p className="text-lg text-gray-400 mb-8">
        This diagram was automatically generated by analyzing the repository.
      </p>

      <div className="w-full">
        {isLoading && (
          <div className="border-2 border-dashed border-gray-700 bg-gray-900/20 rounded-lg min-h-[500px] flex items-center justify-center p-8">
            <p className="text-gray-400 text-xl animate-pulse">Analyzing the repository and generating a diagram...</p>
          </div>
        )}
        {error && <p className="text-red-500 text-center p-8 bg-red-900/20 rounded-lg">{error}</p>}
        {diagram && !isLoading && (
          <FlowDiagram 
            chart={diagram} 
            title="Repository Architecture" 
            prompt={prompt} 
            editable={true}
            onUpdate={handleDiagramUpdate}
          />
        )}
      </div>
    </main>
  );
}

export default function VisualizePage() {
  return (
    <Suspense fallback={<div className="text-center p-8 text-xl">Loading Repository...</div>}>
      <VisualizePageContent />
    </Suspense>
  );
}